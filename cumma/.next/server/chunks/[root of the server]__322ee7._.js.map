{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/app/api/upload/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { S3Client, PutObjectCommand, DeleteObjectCommand } from '@aws-sdk/client-s3'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport crypto from 'crypto'\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_REGION!,\n  credentials: {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\n  },\n})\n\nexport async function POST(request: Request) {\n  try {\n    const { fileType } = await request.json()\n\n    // Generate a unique filename\n    const fileKey = `${crypto.randomBytes(16).toString('hex')}-${Date.now()}${getExtension(fileType)}`\n\n    // Create the command to put the object\n    const putObjectCommand = new PutObjectCommand({\n      Bucket: process.env.AWS_BUCKET_NAME!,\n      Key: fileKey,\n      ContentType: fileType,\n    })\n\n    // Generate a presigned URL for uploading\n    const url = await getSignedUrl(s3Client, putObjectCommand, { expiresIn: 3600 })\n\n    return NextResponse.json({ url, key: fileKey })\n  } catch (error) {\n    console.error('Error generating presigned URL:', error)\n    return NextResponse.json(\n      { error: 'Failed to generate upload URL' },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function DELETE(request: Request) {\n  try {\n    const { fileKey } = await request.json()\n\n    // Create the command to delete the object\n    const deleteObjectCommand = new DeleteObjectCommand({\n      Bucket: process.env.AWS_BUCKET_NAME!,\n      Key: fileKey,\n    })\n\n    // Delete the object from S3\n    await s3Client.send(deleteObjectCommand)\n\n    return NextResponse.json({ success: true })\n  } catch (error) {\n    console.error('Error deleting file:', error)\n    return NextResponse.json(\n      { error: 'Failed to delete file' },\n      { status: 500 }\n    )\n  }\n}\n\nfunction getExtension(fileType: string): string {\n  const extensions: { [key: string]: string } = {\n    'image/jpeg': '.jpg',\n    'image/jpg': '.jpg',\n    'image/png': '.png',\n    'image/gif': '.gif',\n  }\n  return extensions[fileType] || ''\n} "],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AADA;;;;;AAGA,MAAM,WAAW,IAAI,iJAAA,CAAA,WAAQ,CAAC;IAC5B,QAAQ,QAAQ,GAAG,CAAC,UAAU;IAC9B,aAAa;QACX,aAAa,QAAQ,GAAG,CAAC,iBAAiB;QAC1C,iBAAiB,QAAQ,GAAG,CAAC,qBAAqB;IACpD;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvC,6BAA6B;QAC7B,MAAM,UAAU,GAAG,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE,KAAK,GAAG,KAAK,aAAa,WAAW;QAElG,uCAAuC;QACvC,MAAM,mBAAmB,IAAI,iJAAA,CAAA,mBAAgB,CAAC;YAC5C,QAAQ,QAAQ,GAAG,CAAC,eAAe;YACnC,KAAK;YACL,aAAa;QACf;QAEA,yCAAyC;QACzC,MAAM,MAAM,MAAM,CAAA,GAAA,0LAAA,CAAA,eAAY,AAAD,EAAE,UAAU,kBAAkB;YAAE,WAAW;QAAK;QAE7E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAK,KAAK;QAAQ;IAC/C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,OAAO,OAAgB;IAC3C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEtC,0CAA0C;QAC1C,MAAM,sBAAsB,IAAI,iJAAA,CAAA,sBAAmB,CAAC;YAClD,QAAQ,QAAQ,GAAG,CAAC,eAAe;YACnC,KAAK;QACP;QAEA,4BAA4B;QAC5B,MAAM,SAAS,IAAI,CAAC;QAEpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAK;IAC3C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEA,SAAS,aAAa,QAAgB;IACpC,MAAM,aAAwC;QAC5C,cAAc;QACd,aAAa;QACb,aAAa;QACb,aAAa;IACf;IACA,OAAO,UAAU,CAAC,SAAS,IAAI;AACjC"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}