{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please add your Mongo URI to .env.local')\n}\n\nconst uri = process.env.MONGODB_URI\nconst options = {}\n\nlet client: MongoClient\nlet clientPromise: Promise<MongoClient>\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>\n  }\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options)\n    globalWithMongo._mongoClientPromise = client.connect()\n  }\n  clientPromise = globalWithMongo._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n  clientPromise = client.connect()\n}\n\nexport async function connectToDatabase() {\n  const client = await clientPromise\n  const db = client.db(process.env.MONGODB_DB)\n  return { client, db }\n} "],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM;IACrB,MAAM,KAAK,OAAO,EAAE,CAAC,QAAQ,GAAG,CAAC,UAAU;IAC3C,OAAO;QAAE;QAAQ;IAAG;AACtB"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/app/api/bookings/route.ts"],"sourcesContent":["import { getServerSession } from 'next-auth'\nimport { NextResponse } from 'next/server'\nimport { connectToDatabase } from '@/lib/mongodb'\nimport { ObjectId } from 'mongodb'\n\nconst validityMap = {\n  \"Annual\": 365 * 24 * 60 * 60 * 1000,\n  \"Monthly\": 30 * 24 * 60 * 60 * 1000,\n  \"Weekly\": 7 * 24 * 60 * 60 * 1000,\n  \"One Day (24 Hours)\": 24 * 60 * 60 * 1000\n}\n\nexport async function GET() {\n  try {\n    const session = await getServerSession()\n    if (!session) {\n      return new NextResponse('Unauthorized', { status: 401 })\n    }\n\n    const { db } = await connectToDatabase()\n    const serviceProviderId = new ObjectId(session.user.id)\n\n    // Get all facilities for this service provider\n    const facilities = await db.collection('Facilities')\n      .find({ serviceProviderId })\n      .toArray()\n\n    const facilityIds = facilities.map(f => f._id)\n\n    // Get all approved bookings for these facilities with startup details\n    const bookings = await db.collection('bookings').aggregate([\n      {\n        $match: {\n          status: 'approved',\n          facilityId: { $in: facilityIds }\n        }\n      },\n      {\n        $lookup: {\n          from: 'Facilities',\n          localField: 'facilityId',\n          foreignField: '_id',\n          as: 'facility'\n        }\n      },\n      {\n        $lookup: {\n          from: 'startups',\n          localField: 'startupId',\n          foreignField: '_id',\n          as: 'startup'\n        }\n      },\n      {\n        $unwind: '$facility'\n      },\n      {\n        $unwind: '$startup'\n      },\n      {\n        $project: {\n          startupDetails: {\n            logoUrl: '$startup.logoUrl',\n            startupName: '$startup.startupName'\n          },\n          facilityType: '$facility.facilityType',\n          bookedOn: '$updatedAt',\n          rentalPlan: 1,\n          amount: 1\n        }\n      },\n      {\n        $sort: { bookedOn: -1 }\n      }\n    ]).toArray()\n\n    // Calculate validity for each booking\n    const bookingsWithValidity = bookings.map(booking => {\n      const validityDuration = validityMap[booking.rentalPlan as keyof typeof validityMap]\n      const validityTill = new Date(new Date(booking.bookedOn).getTime() + validityDuration)\n      \n      return {\n        ...booking,\n        validityTill: validityTill.toISOString()\n      }\n    })\n\n    return NextResponse.json(bookingsWithValidity)\n  } catch (error) {\n    console.error('Error in GET /api/bookings:', error)\n    return new NextResponse('Internal Server Error', { status: 500 })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,cAAc;IAClB,UAAU,MAAM,KAAK,KAAK,KAAK;IAC/B,WAAW,KAAK,KAAK,KAAK,KAAK;IAC/B,UAAU,IAAI,KAAK,KAAK,KAAK;IAC7B,sBAAsB,KAAK,KAAK,KAAK;AACvC;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD;QACrC,IAAI,CAAC,SAAS;YACZ,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,gBAAgB;gBAAE,QAAQ;YAAI;QACxD;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;QACrC,MAAM,oBAAoB,IAAI,uGAAA,CAAA,WAAQ,CAAC,QAAQ,IAAI,CAAC,EAAE;QAEtD,+CAA+C;QAC/C,MAAM,aAAa,MAAM,GAAG,UAAU,CAAC,cACpC,IAAI,CAAC;YAAE;QAAkB,GACzB,OAAO;QAEV,MAAM,cAAc,WAAW,GAAG,CAAC,CAAA,IAAK,EAAE,GAAG;QAE7C,sEAAsE;QACtE,MAAM,WAAW,MAAM,GAAG,UAAU,CAAC,YAAY,SAAS,CAAC;YACzD;gBACE,QAAQ;oBACN,QAAQ;oBACR,YAAY;wBAAE,KAAK;oBAAY;gBACjC;YACF;YACA;gBACE,SAAS;oBACP,MAAM;oBACN,YAAY;oBACZ,cAAc;oBACd,IAAI;gBACN;YACF;YACA;gBACE,SAAS;oBACP,MAAM;oBACN,YAAY;oBACZ,cAAc;oBACd,IAAI;gBACN;YACF;YACA;gBACE,SAAS;YACX;YACA;gBACE,SAAS;YACX;YACA;gBACE,UAAU;oBACR,gBAAgB;wBACd,SAAS;wBACT,aAAa;oBACf;oBACA,cAAc;oBACd,UAAU;oBACV,YAAY;oBACZ,QAAQ;gBACV;YACF;YACA;gBACE,OAAO;oBAAE,UAAU,CAAC;gBAAE;YACxB;SACD,EAAE,OAAO;QAEV,sCAAsC;QACtC,MAAM,uBAAuB,SAAS,GAAG,CAAC,CAAA;YACxC,MAAM,mBAAmB,WAAW,CAAC,QAAQ,UAAU,CAA6B;YACpF,MAAM,eAAe,IAAI,KAAK,IAAI,KAAK,QAAQ,QAAQ,EAAE,OAAO,KAAK;YAErE,OAAO;gBACL,GAAG,OAAO;gBACV,cAAc,aAAa,WAAW;YACxC;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,yBAAyB;YAAE,QAAQ;QAAI;IACjE;AACF"}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}