{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/app/%28auth%29/sign-up/startup/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/sign-up/startup/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/sign-up/startup/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/app/%28auth%29/sign-up/startup/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/(auth)/sign-up/startup/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/(auth)/sign-up/startup/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose'\nimport { MongoClient } from 'mongodb'\n\ndeclare global {\n  var mongoose: {\n    conn: typeof mongoose | null\n    promise: Promise<typeof mongoose> | null\n  } | undefined\n}\n\nconst MONGODB_URI = process.env.MONGODB_URI!\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env')\n}\n\nlet client: MongoClient\nlet clientPromise: Promise<MongoClient>\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>\n  }\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(MONGODB_URI)\n    globalWithMongo._mongoClientPromise = client.connect()\n  }\n  clientPromise = globalWithMongo._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(MONGODB_URI)\n  clientPromise = client.connect()\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport { clientPromise }\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongoose\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null }\n}\n\nasync function connectDB() {\n  if (cached.conn) {\n    return cached.conn\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    }\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts)\n  }\n\n  try {\n    cached.conn = await cached.promise\n  } catch (e) {\n    cached.promise = null\n    throw e\n  }\n\n  return cached.conn\n}\n\nexport default connectDB "],"names":[],"mappings":";;;;AAAA;AACA;;;AASA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QACzB,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;;AAMA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;IACjD;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/models/User.ts"],"sourcesContent":["import mongoose from 'mongoose'\nimport bcrypt from 'bcryptjs'\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: [true, 'Email is required'],\n    unique: true,\n    match: [/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, 'Invalid email format'],\n  },\n  password: {\n    type: String,\n    minlength: [8, 'Password must be at least 8 characters'],\n    default: null,\n  },\n  userType: {\n    type: String,\n    enum: ['startup', 'Service Provider'],\n    required: [true, 'User type is required'],\n  },\n  authProvider: {\n    type: String,\n    enum: ['local', 'google', 'facebook', 'apple'],\n    required: [true, 'Auth provider is required'],\n    default: 'local',\n  },\n  authProviderId: {\n    type: String,\n    default: null,\n  },\n  isEmailVerified: {\n    type: Boolean,\n    required: true,\n    default: false,\n  },\n  createdAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n}, {\n  collection: 'Users'\n})\n\n// Hash password before saving\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next()\n  }\n\n  try {\n    const salt = await bcrypt.genSalt(10)\n    this.password = await bcrypt.hash(this.password, salt)\n    next()\n  } catch (error: any) {\n    next(error)\n  }\n})\n\n// Compare password method\nuserSchema.methods.comparePassword = async function (candidatePassword: string) {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password)\n  } catch (error) {\n    throw error\n  }\n}\n\n// Update timestamps on save\nuserSchema.pre('save', function (next) {\n  this.updatedAt = new Date()\n  next()\n})\n\n// Export with exact collection name\nexport default mongoose.models['Users'] || mongoose.model('Users', userSchema, 'Users') "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAO;YAAC;YAAoD;SAAuB;IACrF;IACA,UAAU;QACR,MAAM;QACN,WAAW;YAAC;YAAG;SAAyC;QACxD,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,MAAM;YAAC;YAAW;SAAmB;QACrC,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,cAAc;QACZ,MAAM;QACN,MAAM;YAAC;YAAS;YAAU;YAAY;SAAQ;QAC9C,UAAU;YAAC;YAAM;SAA4B;QAC7C,SAAS;IACX;IACA,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;QACV,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;AACF,GAAG;IACD,YAAY;AACd;AAEA,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa;QAChC,OAAO;IACT;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,iIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACjD;IACF,EAAE,OAAO,OAAY;QACnB,KAAK;IACP;AACF;AAEA,0BAA0B;AAC1B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAgB,iBAAyB;IAC5E,IAAI;QACF,OAAO,MAAM,iIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;IAC9D,EAAE,OAAO,OAAO;QACd,MAAM;IACR;AACF;AAEA,4BAA4B;AAC5B,WAAW,GAAG,CAAC,QAAQ,SAAU,IAAI;IACnC,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS,YAAY"}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 246, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/models/Startup.ts"],"sourcesContent":["import mongoose from 'mongoose'\n\nconst startupSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Users',\n    required: true,\n  },\n  startupName: {\n    type: String,\n    required: [true, 'Startup name is required'],\n    minLength: 1,\n  },\n  contactName: {\n    type: String,\n    required: [true, 'Contact name is required'],\n    minLength: 1,\n  },\n  contactNumber: {\n    type: String,\n    required: [true, 'Contact number is required'],\n    minLength: 1,\n  },\n  address: {\n    type: String,\n    default: null,\n  },\n  logoUrl: {\n    type: String,\n    default: null,\n  },\n  createdAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n}, {\n  collection: 'Startups'\n})\n\n// Update timestamps on save\nstartupSchema.pre('save', function (next) {\n  this.updatedAt = new Date()\n  next()\n})\n\n// Export with exact collection name\nexport default mongoose.models['Startups'] || mongoose.model('Startups', startupSchema, 'Startups') "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACxC,QAAQ;QACN,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;QAC5C,WAAW;IACb;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;QAC5C,WAAW;IACb;IACA,eAAe;QACb,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;IACb;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;AACF,GAAG;IACD,YAAY;AACd;AAEA,4BAA4B;AAC5B,cAAc,GAAG,CAAC,QAAQ,SAAU,IAAI;IACtC,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,WAAW,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,YAAY,eAAe"}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/models/ServiceProvider.ts"],"sourcesContent":["import mongoose from 'mongoose'\n\nconst serviceProviderSchema = new mongoose.Schema({\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Users',\n    required: true,\n  },\n  serviceProviderType: {\n    type: String,\n    enum: [\n      'Incubator',\n      'Accelerator',\n      'Institution/University',\n      'Private Coworking Space',\n      'Community Space',\n      'Cafe'\n    ],\n    required: [true, 'Service provider type is required'],\n  },\n  serviceName: {\n    type: String,\n    required: [true, 'Service name is required'],\n    minLength: 1,\n  },\n  address: {\n    type: String,\n    required: [true, 'Address is required'],\n    minLength: 1,\n  },\n  features: {\n    type: [{ type: String }],\n    default: [],\n  },\n  city: {\n    type: String,\n    required: [true, 'City is required'],\n    minLength: 1,\n  },\n  stateProvince: {\n    type: String,\n    required: [true, 'State/Province is required'],\n    minLength: 1,\n  },\n  zipPostalCode: {\n    type: String,\n    required: [true, 'ZIP/Postal Code is required'],\n    minLength: 1,\n  },\n  primaryContact1Name: {\n    type: String,\n    required: [true, 'Primary contact name is required'],\n    minLength: 1,\n  },\n  primaryContact1Designation: {\n    type: String,\n    required: [true, 'Primary contact designation is required'],\n    minLength: 1,\n  },\n  contact2Name: {\n    type: String,\n    default: null,\n  },\n  contact2Designation: {\n    type: String,\n    default: null,\n  },\n  primaryContactNumber: {\n    type: String,\n    required: [true, 'Primary contact number is required'],\n    minLength: 1,\n  },\n  alternateContactNumber: {\n    type: String,\n    default: null,\n  },\n  primaryEmailId: {\n    type: String,\n    required: [true, 'Primary email is required'],\n    match: [/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, 'Invalid email format'],\n  },\n  alternateEmailId: {\n    type: String,\n    default: null,\n    validate: {\n      validator: function(v: string | null) {\n        if (!v) return true\n        return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(v)\n      },\n      message: 'Invalid alternate email format',\n    },\n  },\n  logoUrl: {\n    type: String,\n    default: null,\n  },\n  websiteUrl: {\n    type: String,\n    default: null,\n  },\n  createdAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n}, {\n  collection: 'Service Provider'\n})\n\n// Update timestamps on save\nserviceProviderSchema.pre('save', function (next) {\n  this.updatedAt = new Date()\n  next()\n})\n\nexport default mongoose.models['Service Provider'] || mongoose.model('Service Provider', serviceProviderSchema, 'Service Provider') "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAChD,QAAQ;QACN,MAAM,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;QACpC,KAAK;QACL,UAAU;IACZ;IACA,qBAAqB;QACnB,MAAM;QACN,MAAM;YACJ;YACA;YACA;YACA;YACA;YACA;SACD;QACD,UAAU;YAAC;YAAM;SAAoC;IACvD;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;QAC5C,WAAW;IACb;IACA,SAAS;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAAsB;QACvC,WAAW;IACb;IACA,UAAU;QACR,MAAM;YAAC;gBAAE,MAAM;YAAO;SAAE;QACxB,SAAS,EAAE;IACb;IACA,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAAmB;QACpC,WAAW;IACb;IACA,eAAe;QACb,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;IACb;IACA,eAAe;QACb,MAAM;QACN,UAAU;YAAC;YAAM;SAA8B;QAC/C,WAAW;IACb;IACA,qBAAqB;QACnB,MAAM;QACN,UAAU;YAAC;YAAM;SAAmC;QACpD,WAAW;IACb;IACA,4BAA4B;QAC1B,MAAM;QACN,UAAU;YAAC;YAAM;SAA0C;QAC3D,WAAW;IACb;IACA,cAAc;QACZ,MAAM;QACN,SAAS;IACX;IACA,qBAAqB;QACnB,MAAM;QACN,SAAS;IACX;IACA,sBAAsB;QACpB,MAAM;QACN,UAAU;YAAC;YAAM;SAAqC;QACtD,WAAW;IACb;IACA,wBAAwB;QACtB,MAAM;QACN,SAAS;IACX;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,OAAO;YAAC;YAAoD;SAAuB;IACrF;IACA,kBAAkB;QAChB,MAAM;QACN,SAAS;QACT,UAAU;YACR,WAAW,SAAS,CAAgB;gBAClC,IAAI,CAAC,GAAG,OAAO;gBACf,OAAO,mDAAmD,IAAI,CAAC;YACjE;YACA,SAAS;QACX;IACF;IACA,SAAS;QACP,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;AACF,GAAG;IACD,YAAY;AACd;AAEA,4BAA4B;AAC5B,sBAAsB,GAAG,CAAC,QAAQ,SAAU,IAAI;IAC9C,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAEe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,mBAAmB,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,oBAAoB,uBAAuB"}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 479, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/actions/auth.ts"],"sourcesContent":["'use server'\n\nimport { z } from 'zod'\nimport { startupSignUpSchema, serviceProviderSignUpSchema } from '@/lib/validations/auth'\nimport connectDB from '@/lib/db'\nimport User from '@/models/User'\nimport Startup from '@/models/Startup'\nimport ServiceProvider from '@/models/ServiceProvider'\nimport mongoose from 'mongoose'\nimport crypto from 'crypto'\n\n// Function to generate random alphanumeric ID\nfunction generateAuthProviderId(length: number = 24): string {\n  return crypto.randomBytes(length)\n    .toString('base64')\n    .replace(/[^a-zA-Z0-9]/g, '')\n    .slice(0, length);\n}\n\nexport async function registerStartup(data: z.infer<typeof startupSignUpSchema>) {\n  try {\n    console.log('Connecting to database...')\n    await connectDB()\n    \n    // Ensure database connection is established\n    if (!mongoose.connection.db) {\n      throw new Error('Database connection not established')\n    }\n    console.log('Connected to database')\n\n    // Start a session for transaction\n    const session = await mongoose.startSession()\n    session.startTransaction()\n\n    try {\n      // Check if user already exists\n      console.log('Checking for existing user...')\n      const existingUser = await User.findOne({ email: data.email }).session(session)\n      if (existingUser) {\n        throw new Error('User already exists')\n      }\n      console.log('No existing user found')\n\n      // Create user using Mongoose model\n      console.log('Creating user...')\n      const user = await User.create([{\n        email: data.email,\n        password: data.password, // Will be hashed by the pre-save middleware\n        userType: 'startup',\n        authProvider: 'local',\n        authProviderId: generateAuthProviderId(),\n        isEmailVerified: false,\n      }], { session })\n      \n      const userId = user[0]._id\n      console.log('User created:', userId)\n\n      // Create startup using Mongoose model\n      console.log('Creating startup profile...')\n      const startup = await Startup.create([{\n        userId: userId,\n        startupName: data.startupName,\n        contactName: data.contactName,\n        contactNumber: data.contactNumber,\n      }], { session })\n      \n      console.log('Startup profile created:', startup[0]._id)\n\n      // Commit the transaction\n      await session.commitTransaction()\n      console.log('Transaction committed successfully')\n\n      return { success: true }\n    } catch (error) {\n      // If an error occurred, abort the transaction\n      await session.abortTransaction()\n      throw error\n    } finally {\n      // End the session\n      session.endSession()\n    }\n  } catch (error: any) {\n    console.error('Registration error:', error)\n    return { error: error.message }\n  }\n}\n\nexport async function registerServiceProvider(data: z.infer<typeof serviceProviderSignUpSchema>) {\n  try {\n    console.log('Connecting to database...')\n    await connectDB()\n    \n    // Ensure database connection is established\n    if (!mongoose.connection.db) {\n      throw new Error('Database connection not established')\n    }\n    console.log('Connected to database')\n\n    // Start a session for transaction\n    const session = await mongoose.startSession()\n    session.startTransaction()\n\n    try {\n      // Check if user already exists\n      console.log('Checking for existing user...')\n      const existingUser = await User.findOne({ email: data.email }).session(session)\n      if (existingUser) {\n        throw new Error('User already exists')\n      }\n      console.log('No existing user found')\n\n      // Create user using Mongoose model\n      console.log('Creating user...')\n      const user = await User.create([{\n        email: data.email,\n        password: data.password, // Will be hashed by the pre-save middleware\n        userType: 'Service Provider',\n        authProvider: 'local',\n        authProviderId: generateAuthProviderId(),\n        isEmailVerified: false,\n      }], { session })\n      \n      const userId = user[0]._id\n      console.log('User created:', userId)\n\n      // Create service provider using Mongoose model\n      console.log('Creating service provider profile...')\n      const serviceProvider = await ServiceProvider.create([{\n        userId: userId,\n        serviceProviderType: data.serviceProviderType,\n        serviceName: data.serviceName,\n        address: data.address,\n        city: data.city,\n        stateProvince: data.stateProvince,\n        zipPostalCode: data.zipPostalCode,\n        primaryContact1Name: data.primaryContact1Name,\n        primaryContact1Designation: data.primaryContact1Designation,\n        primaryContactNumber: data.primaryContactNumber,\n        primaryEmailId: data.email,\n        features: [],\n        ...(data.contact2Name && { contact2Name: data.contact2Name }),\n        ...(data.contact2Designation && { contact2Designation: data.contact2Designation }),\n        ...(data.alternateContactNumber && { alternateContactNumber: data.alternateContactNumber }),\n        ...(data.alternateEmailId && { alternateEmailId: data.alternateEmailId }),\n        ...(data.websiteUrl && { websiteUrl: data.websiteUrl }),\n      }], { session })\n      \n      console.log('Service provider profile created:', serviceProvider[0]._id)\n\n      // Commit the transaction\n      await session.commitTransaction()\n      console.log('Transaction committed successfully')\n\n      return { success: true }\n    } catch (error) {\n      // If an error occurred, abort the transaction\n      await session.abortTransaction()\n      throw error\n    } finally {\n      // End the session\n      session.endSession()\n    }\n  } catch (error: any) {\n    console.error('Registration error:', error)\n    return { error: error.message }\n  }\n} "],"names":[],"mappings":";;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEA,8CAA8C;AAC9C,SAAS,uBAAuB,SAAiB,EAAE;IACjD,OAAO,qGAAA,CAAA,UAAM,CAAC,WAAW,CAAC,QACvB,QAAQ,CAAC,UACT,OAAO,CAAC,iBAAiB,IACzB,KAAK,CAAC,GAAG;AACd;AAEO,eAAe,uCAAa,GAAb,gBAAgB,IAAyC;IAC7E,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QAEd,4CAA4C;QAC5C,IAAI,CAAC,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,EAAE;YAC3B,MAAM,IAAI,MAAM;QAClB;QACA,QAAQ,GAAG,CAAC;QAEZ,kCAAkC;QAClC,MAAM,UAAU,MAAM,yGAAA,CAAA,UAAQ,CAAC,YAAY;QAC3C,QAAQ,gBAAgB;QAExB,IAAI;YACF,+BAA+B;YAC/B,QAAQ,GAAG,CAAC;YACZ,MAAM,eAAe,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBAAE,OAAO,KAAK,KAAK;YAAC,GAAG,OAAO,CAAC;YACvE,IAAI,cAAc;gBAChB,MAAM,IAAI,MAAM;YAClB;YACA,QAAQ,GAAG,CAAC;YAEZ,mCAAmC;YACnC,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;gBAAC;oBAC9B,OAAO,KAAK,KAAK;oBACjB,UAAU,KAAK,QAAQ;oBACvB,UAAU;oBACV,cAAc;oBACd,gBAAgB;oBAChB,iBAAiB;gBACnB;aAAE,EAAE;gBAAE;YAAQ;YAEd,MAAM,SAAS,IAAI,CAAC,EAAE,CAAC,GAAG;YAC1B,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,sCAAsC;YACtC,QAAQ,GAAG,CAAC;YACZ,MAAM,UAAU,MAAM,wHAAA,CAAA,UAAO,CAAC,MAAM,CAAC;gBAAC;oBACpC,QAAQ;oBACR,aAAa,KAAK,WAAW;oBAC7B,aAAa,KAAK,WAAW;oBAC7B,eAAe,KAAK,aAAa;gBACnC;aAAE,EAAE;gBAAE;YAAQ;YAEd,QAAQ,GAAG,CAAC,4BAA4B,OAAO,CAAC,EAAE,CAAC,GAAG;YAEtD,yBAAyB;YACzB,MAAM,QAAQ,iBAAiB;YAC/B,QAAQ,GAAG,CAAC;YAEZ,OAAO;gBAAE,SAAS;YAAK;QACzB,EAAE,OAAO,OAAO;YACd,8CAA8C;YAC9C,MAAM,QAAQ,gBAAgB;YAC9B,MAAM;QACR,SAAU;YACR,kBAAkB;YAClB,QAAQ,UAAU;QACpB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;AACF;AAEO,eAAe,uCAAqB,GAArB,wBAAwB,IAAiD;IAC7F,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAA,GAAA,gHAAA,CAAA,UAAS,AAAD;QAEd,4CAA4C;QAC5C,IAAI,CAAC,yGAAA,CAAA,UAAQ,CAAC,UAAU,CAAC,EAAE,EAAE;YAC3B,MAAM,IAAI,MAAM;QAClB;QACA,QAAQ,GAAG,CAAC;QAEZ,kCAAkC;QAClC,MAAM,UAAU,MAAM,yGAAA,CAAA,UAAQ,CAAC,YAAY;QAC3C,QAAQ,gBAAgB;QAExB,IAAI;YACF,+BAA+B;YAC/B,QAAQ,GAAG,CAAC;YACZ,MAAM,eAAe,MAAM,qHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;gBAAE,OAAO,KAAK,KAAK;YAAC,GAAG,OAAO,CAAC;YACvE,IAAI,cAAc;gBAChB,MAAM,IAAI,MAAM;YAClB;YACA,QAAQ,GAAG,CAAC;YAEZ,mCAAmC;YACnC,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;gBAAC;oBAC9B,OAAO,KAAK,KAAK;oBACjB,UAAU,KAAK,QAAQ;oBACvB,UAAU;oBACV,cAAc;oBACd,gBAAgB;oBAChB,iBAAiB;gBACnB;aAAE,EAAE;gBAAE;YAAQ;YAEd,MAAM,SAAS,IAAI,CAAC,EAAE,CAAC,GAAG;YAC1B,QAAQ,GAAG,CAAC,iBAAiB;YAE7B,+CAA+C;YAC/C,QAAQ,GAAG,CAAC;YACZ,MAAM,kBAAkB,MAAM,gIAAA,CAAA,UAAe,CAAC,MAAM,CAAC;gBAAC;oBACpD,QAAQ;oBACR,qBAAqB,KAAK,mBAAmB;oBAC7C,aAAa,KAAK,WAAW;oBAC7B,SAAS,KAAK,OAAO;oBACrB,MAAM,KAAK,IAAI;oBACf,eAAe,KAAK,aAAa;oBACjC,eAAe,KAAK,aAAa;oBACjC,qBAAqB,KAAK,mBAAmB;oBAC7C,4BAA4B,KAAK,0BAA0B;oBAC3D,sBAAsB,KAAK,oBAAoB;oBAC/C,gBAAgB,KAAK,KAAK;oBAC1B,UAAU,EAAE;oBACZ,GAAI,KAAK,YAAY,IAAI;wBAAE,cAAc,KAAK,YAAY;oBAAC,CAAC;oBAC5D,GAAI,KAAK,mBAAmB,IAAI;wBAAE,qBAAqB,KAAK,mBAAmB;oBAAC,CAAC;oBACjF,GAAI,KAAK,sBAAsB,IAAI;wBAAE,wBAAwB,KAAK,sBAAsB;oBAAC,CAAC;oBAC1F,GAAI,KAAK,gBAAgB,IAAI;wBAAE,kBAAkB,KAAK,gBAAgB;oBAAC,CAAC;oBACxE,GAAI,KAAK,UAAU,IAAI;wBAAE,YAAY,KAAK,UAAU;oBAAC,CAAC;gBACxD;aAAE,EAAE;gBAAE;YAAQ;YAEd,QAAQ,GAAG,CAAC,qCAAqC,eAAe,CAAC,EAAE,CAAC,GAAG;YAEvE,yBAAyB;YACzB,MAAM,QAAQ,iBAAiB;YAC/B,QAAQ,GAAG,CAAC;YAEZ,OAAO;gBAAE,SAAS;YAAK;QACzB,EAAE,OAAO,OAAO;YACd,8CAA8C;YAC9C,MAAM,QAAQ,gBAAgB;YAC9B,MAAM;QACR,SAAU;YACR,kBAAkB;YAClB,QAAQ,UAAU;QACpB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO;YAAE,OAAO,MAAM,OAAO;QAAC;IAChC;AACF;;;IAnJsB;IAoEA;;AApEA,+OAAA;AAoEA,+OAAA"}},
    {"offset": {"line": 678, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 684, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}