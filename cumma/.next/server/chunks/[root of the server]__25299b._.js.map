{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose'\nimport { MongoClient } from 'mongodb'\n\ndeclare global {\n  var mongoose: {\n    conn: typeof mongoose | null\n    promise: Promise<typeof mongoose> | null\n  } | undefined\n}\n\nconst MONGODB_URI = process.env.MONGODB_URI!\n\nif (!MONGODB_URI) {\n  throw new Error('Please define the MONGODB_URI environment variable inside .env')\n}\n\nlet client: MongoClient\nlet clientPromise: Promise<MongoClient>\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>\n  }\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(MONGODB_URI)\n    globalWithMongo._mongoClientPromise = client.connect()\n  }\n  clientPromise = globalWithMongo._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(MONGODB_URI)\n  clientPromise = client.connect()\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport { clientPromise }\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongoose\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null }\n}\n\nasync function connectDB() {\n  if (cached.conn) {\n    return cached.conn\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    }\n\n    cached.promise = mongoose.connect(MONGODB_URI, opts)\n  }\n\n  try {\n    cached.conn = await cached.promise\n  } catch (e) {\n    cached.promise = null\n    throw e\n  }\n\n  return cached.conn\n}\n\nexport default connectDB "],"names":[],"mappings":";;;;AAAA;AACA;;;AASA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC;QACzB,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;;AAMA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACzD;AAEA,eAAe;IACb,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,MAAM,OAAO;YACX,gBAAgB;QAClB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa;IACjD;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,GAAG;QACV,OAAO,OAAO,GAAG;QACjB,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/models/User.ts"],"sourcesContent":["import mongoose from 'mongoose'\nimport bcrypt from 'bcryptjs'\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: [true, 'Email is required'],\n    unique: true,\n    match: [/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/, 'Invalid email format'],\n  },\n  password: {\n    type: String,\n    minlength: [8, 'Password must be at least 8 characters'],\n    default: null,\n  },\n  userType: {\n    type: String,\n    enum: ['startup', 'Service Provider'],\n    required: [true, 'User type is required'],\n  },\n  authProvider: {\n    type: String,\n    enum: ['local', 'google', 'facebook', 'apple'],\n    required: [true, 'Auth provider is required'],\n    default: 'local',\n  },\n  authProviderId: {\n    type: String,\n    default: null,\n  },\n  isEmailVerified: {\n    type: Boolean,\n    required: true,\n    default: false,\n  },\n  createdAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n  updatedAt: {\n    type: Date,\n    required: true,\n    default: Date.now,\n  },\n}, {\n  collection: 'Users'\n})\n\n// Hash password before saving\nuserSchema.pre('save', async function (next) {\n  if (!this.isModified('password')) {\n    return next()\n  }\n\n  try {\n    const salt = await bcrypt.genSalt(10)\n    this.password = await bcrypt.hash(this.password, salt)\n    next()\n  } catch (error: any) {\n    next(error)\n  }\n})\n\n// Compare password method\nuserSchema.methods.comparePassword = async function (candidatePassword: string) {\n  try {\n    return await bcrypt.compare(candidatePassword, this.password)\n  } catch (error) {\n    throw error\n  }\n}\n\n// Update timestamps on save\nuserSchema.pre('save', function (next) {\n  this.updatedAt = new Date()\n  next()\n})\n\n// Export with exact collection name\nexport default mongoose.models['Users'] || mongoose.model('Users', userSchema, 'Users') "],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACrC,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAO;YAAC;YAAoD;SAAuB;IACrF;IACA,UAAU;QACR,MAAM;QACN,WAAW;YAAC;YAAG;SAAyC;QACxD,SAAS;IACX;IACA,UAAU;QACR,MAAM;QACN,MAAM;YAAC;YAAW;SAAmB;QACrC,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,cAAc;QACZ,MAAM;QACN,MAAM;YAAC;YAAS;YAAU;YAAY;SAAQ;QAC9C,UAAU;YAAC;YAAM;SAA4B;QAC7C,SAAS;IACX;IACA,gBAAgB;QACd,MAAM;QACN,SAAS;IACX;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;QACV,SAAS;IACX;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;IACA,WAAW;QACT,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACnB;AACF,GAAG;IACD,YAAY;AACd;AAEA,8BAA8B;AAC9B,WAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa;QAChC,OAAO;IACT;IAEA,IAAI;QACF,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC;QAClC,IAAI,CAAC,QAAQ,GAAG,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;QACjD;IACF,EAAE,OAAO,OAAY;QACnB,KAAK;IACP;AACF;AAEA,0BAA0B;AAC1B,WAAW,OAAO,CAAC,eAAe,GAAG,eAAgB,iBAAyB;IAC5E,IAAI;QACF,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,mBAAmB,IAAI,CAAC,QAAQ;IAC9D,EAAE,OAAO,OAAO;QACd,MAAM;IACR;AACF;AAEA,4BAA4B;AAC5B,WAAW,GAAG,CAAC,QAAQ,SAAU,IAAI;IACnC,IAAI,CAAC,SAAS,GAAG,IAAI;IACrB;AACF;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,QAAQ,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS,YAAY"}},
    {"offset": {"line": 316, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 322, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from 'next-auth'\nimport { MongoDBAdapter } from '@next-auth/mongodb-adapter'\nimport CredentialsProvider from 'next-auth/providers/credentials'\nimport { clientPromise } from '@/lib/db'\nimport User from '@/models/User'\nimport connectDB from '@/lib/db'\n\nexport const authOptions: NextAuthOptions = {\n  adapter: MongoDBAdapter(clientPromise),\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('Please enter an email and password')\n        }\n\n        await connectDB()\n\n        const user = await User.findOne({ email: credentials.email })\n        if (!user || !user.password) {\n          throw new Error('No user found with this email')\n        }\n\n        const isValid = await user.comparePassword(credentials.password)\n        if (!isValid) {\n          throw new Error('Invalid password')\n        }\n\n        return {\n          id: user._id.toString(),\n          email: user.email,\n          userType: user.userType,\n        }\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id\n        token.userType = user.userType\n      }\n      return token\n    },\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id\n        session.user.userType = token.userType\n      }\n      return session\n    },\n  },\n  pages: {\n    signIn: '/sign-in',\n    newUser: '/sign-up',\n    error: '/sign-in',\n  },\n} "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;;AAGO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,uKAAA,CAAA,iBAAc,AAAD,EAAE,kHAAA,CAAA,gBAAa;IACrC,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,CAAA,GAAA,kHAAA,CAAA,UAAS,AAAD;gBAEd,MAAM,OAAO,MAAM,uHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;oBAAE,OAAO,YAAY,KAAK;gBAAC;gBAC3D,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;oBAC3B,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,UAAU,MAAM,KAAK,eAAe,CAAC,YAAY,QAAQ;gBAC/D,IAAI,CAAC,SAAS;oBACZ,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;oBACrB,OAAO,KAAK,KAAK;oBACjB,UAAU,KAAK,QAAQ;gBACzB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;IACF;IACA,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;AACF"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/lib/mongodb.ts"],"sourcesContent":["import { MongoClient } from 'mongodb'\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please add your Mongo URI to .env.local')\n}\n\nconst uri = process.env.MONGODB_URI\nconst options = {}\n\nlet client: MongoClient\nlet clientPromise: Promise<MongoClient>\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  let globalWithMongo = global as typeof globalThis & {\n    _mongoClientPromise?: Promise<MongoClient>\n  }\n\n  if (!globalWithMongo._mongoClientPromise) {\n    client = new MongoClient(uri, options)\n    globalWithMongo._mongoClientPromise = client.connect()\n  }\n  clientPromise = globalWithMongo._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n  clientPromise = client.connect()\n}\n\nexport async function connectToDatabase() {\n  const client = await clientPromise\n  const db = client.db(process.env.MONGODB_DB)\n  return { client, db }\n} "],"names":[],"mappings":";;;AAAA;;AAEA,IAAI,CAAC,QAAQ,GAAG,CAAC,WAAW,EAAE;IAC5B,MAAM,IAAI,MAAM;AAClB;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AACnC,MAAM,UAAU,CAAC;AAEjB,IAAI;AACJ,IAAI;AAEJ,wCAA4C;IAC1C,+DAA+D;IAC/D,6EAA6E;IAC7E,IAAI,kBAAkB;IAItB,IAAI,CAAC,gBAAgB,mBAAmB,EAAE;QACxC,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,KAAK;QAC9B,gBAAgB,mBAAmB,GAAG,OAAO,OAAO;IACtD;IACA,gBAAgB,gBAAgB,mBAAmB;AACrD,OAAO;;AAIP;AAEO,eAAe;IACpB,MAAM,SAAS,MAAM;IACrB,MAAM,KAAK,OAAO,EAAE,CAAC,QAAQ,GAAG,CAAC,UAAU;IAC3C,OAAO;QAAE;QAAQ;IAAG;AACtB"}},
    {"offset": {"line": 436, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/sam/Developer/cumma/src/app/api/service-provider/profile/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport { authOptions } from '@/lib/auth'\nimport { connectToDatabase } from '@/lib/mongodb'\nimport { ObjectId } from 'mongodb'\n\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions)\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { db } = await connectToDatabase()\n    const serviceProviderId = new ObjectId(session.user.id)\n\n    const serviceProvider = await db.collection('Service Provider').findOne({\n      userId: serviceProviderId\n    })\n\n    if (!serviceProvider) {\n      return NextResponse.json({ error: 'Service provider not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: serviceProvider\n    })\n  } catch (error) {\n    console.error('Error fetching service provider profile:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAClD,IAAI,CAAC,SAAS,MAAM,IAAI;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAe,GAAG;gBAAE,QAAQ;YAAI;QACpE;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM,CAAA,GAAA,uHAAA,CAAA,oBAAiB,AAAD;QACrC,MAAM,oBAAoB,IAAI,uGAAA,CAAA,WAAQ,CAAC,QAAQ,IAAI,CAAC,EAAE;QAEtD,MAAM,kBAAkB,MAAM,GAAG,UAAU,CAAC,oBAAoB,OAAO,CAAC;YACtE,QAAQ;QACV;QAEA,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA6B,GAAG;gBAAE,QAAQ;YAAI;QAClF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}